//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Language.Discovery.SchoolService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SchoolService.ISchoolService")]
    public interface ISchoolService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/AddSchool", ReplyAction="http://tempuri.org/ISchoolService/AddSchoolResponse")]
        int AddSchool(Language.Discovery.Entity.SchoolContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/AddSchool", ReplyAction="http://tempuri.org/ISchoolService/AddSchoolResponse")]
        System.Threading.Tasks.Task<int> AddSchoolAsync(Language.Discovery.Entity.SchoolContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/UpdateSchool", ReplyAction="http://tempuri.org/ISchoolService/UpdateSchoolResponse")]
        bool UpdateSchool(Language.Discovery.Entity.SchoolContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/UpdateSchool", ReplyAction="http://tempuri.org/ISchoolService/UpdateSchoolResponse")]
        System.Threading.Tasks.Task<bool> UpdateSchoolAsync(Language.Discovery.Entity.SchoolContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/DeleteSchool", ReplyAction="http://tempuri.org/ISchoolService/DeleteSchoolResponse")]
        bool DeleteSchool(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/DeleteSchool", ReplyAction="http://tempuri.org/ISchoolService/DeleteSchoolResponse")]
        System.Threading.Tasks.Task<bool> DeleteSchoolAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetByID", ReplyAction="http://tempuri.org/ISchoolService/GetByIDResponse")]
        Language.Discovery.Entity.SchoolContract GetByID(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetByID", ReplyAction="http://tempuri.org/ISchoolService/GetByIDResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.SchoolContract> GetByIDAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SearchSchool", ReplyAction="http://tempuri.org/ISchoolService/SearchSchoolResponse")]
        Language.Discovery.SchoolService.SearchSchoolResponse SearchSchool(Language.Discovery.SchoolService.SearchSchoolRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SearchSchool", ReplyAction="http://tempuri.org/ISchoolService/SearchSchoolResponse")]
        System.Threading.Tasks.Task<Language.Discovery.SchoolService.SearchSchoolResponse> SearchSchoolAsync(Language.Discovery.SchoolService.SearchSchoolRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetUnreadMessageForReview", ReplyAction="http://tempuri.org/ISchoolService/GetUnreadMessageForReviewResponse")]
        Language.Discovery.Entity.UserMessageContract[] GetUnreadMessageForReview(long schoolid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetUnreadMessageForReview", ReplyAction="http://tempuri.org/ISchoolService/GetUnreadMessageForReviewResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageContract[]> GetUnreadMessageForReviewAsync(long schoolid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetAllMessages", ReplyAction="http://tempuri.org/ISchoolService/GetAllMessagesResponse")]
        Language.Discovery.SchoolService.GetAllMessagesResponse GetAllMessages(Language.Discovery.SchoolService.GetAllMessagesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetAllMessages", ReplyAction="http://tempuri.org/ISchoolService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<Language.Discovery.SchoolService.GetAllMessagesResponse> GetAllMessagesAsync(Language.Discovery.SchoolService.GetAllMessagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SetMessageAsReviewed", ReplyAction="http://tempuri.org/ISchoolService/SetMessageAsReviewedResponse")]
        bool SetMessageAsReviewed(long usermailid, long userid, string feedbackmessage, bool isFeedBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SetMessageAsReviewed", ReplyAction="http://tempuri.org/ISchoolService/SetMessageAsReviewedResponse")]
        System.Threading.Tasks.Task<bool> SetMessageAsReviewedAsync(long usermailid, long userid, string feedbackmessage, bool isFeedBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SetMessageAsRejected", ReplyAction="http://tempuri.org/ISchoolService/SetMessageAsRejectedResponse")]
        bool SetMessageAsRejected(long usermailid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/SetMessageAsRejected", ReplyAction="http://tempuri.org/ISchoolService/SetMessageAsRejectedResponse")]
        System.Threading.Tasks.Task<bool> SetMessageAsRejectedAsync(long usermailid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetSchoolTypeList", ReplyAction="http://tempuri.org/ISchoolService/GetSchoolTypeListResponse")]
        Language.Discovery.Entity.SchoolTypeContract[] GetSchoolTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetSchoolTypeList", ReplyAction="http://tempuri.org/ISchoolService/GetSchoolTypeListResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.SchoolTypeContract[]> GetSchoolTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetUnreadMessageForPolling", ReplyAction="http://tempuri.org/ISchoolService/GetUnreadMessageForPollingResponse")]
        Language.Discovery.Entity.UserMessageContract[] GetUnreadMessageForPolling(long schoolid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetUnreadMessageForPolling", ReplyAction="http://tempuri.org/ISchoolService/GetUnreadMessageForPollingResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageContract[]> GetUnreadMessageForPollingAsync(long schoolid, long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetAllFreeMessages", ReplyAction="http://tempuri.org/ISchoolService/GetAllFreeMessagesResponse")]
        Language.Discovery.SchoolService.GetAllFreeMessagesResponse GetAllFreeMessages(Language.Discovery.SchoolService.GetAllFreeMessagesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISchoolService/GetAllFreeMessages", ReplyAction="http://tempuri.org/ISchoolService/GetAllFreeMessagesResponse")]
        System.Threading.Tasks.Task<Language.Discovery.SchoolService.GetAllFreeMessagesResponse> GetAllFreeMessagesAsync(Language.Discovery.SchoolService.GetAllFreeMessagesRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchSchool", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchSchoolRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.SearchSchoolDTO tObject;
        
        public SearchSchoolRequest() {
        }
        
        public SearchSchoolRequest(Language.Discovery.Entity.SearchSchoolDTO tObject) {
            this.tObject = tObject;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchSchoolResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchSchoolResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string SearchSchoolResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int virtualcount;
        
        public SearchSchoolResponse() {
        }
        
        public SearchSchoolResponse(string SearchSchoolResult, int virtualcount) {
            this.SearchSchoolResult = SearchSchoolResult;
            this.virtualcount = virtualcount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllMessages", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllMessagesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.MessageSearchDTO dto;
        
        public GetAllMessagesRequest() {
        }
        
        public GetAllMessagesRequest(Language.Discovery.Entity.MessageSearchDTO dto) {
            this.dto = dto;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllMessagesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllMessagesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.UserMessageContract[] GetAllMessagesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int virtualcount;
        
        public GetAllMessagesResponse() {
        }
        
        public GetAllMessagesResponse(Language.Discovery.Entity.UserMessageContract[] GetAllMessagesResult, int virtualcount) {
            this.GetAllMessagesResult = GetAllMessagesResult;
            this.virtualcount = virtualcount;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllFreeMessages", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllFreeMessagesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.MessageSearchDTO dto;
        
        public GetAllFreeMessagesRequest() {
        }
        
        public GetAllFreeMessagesRequest(Language.Discovery.Entity.MessageSearchDTO dto) {
            this.dto = dto;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllFreeMessagesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllFreeMessagesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.FreeMessageContract[] GetAllFreeMessagesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int virtualcount;
        
        public GetAllFreeMessagesResponse() {
        }
        
        public GetAllFreeMessagesResponse(Language.Discovery.Entity.FreeMessageContract[] GetAllFreeMessagesResult, int virtualcount) {
            this.GetAllFreeMessagesResult = GetAllFreeMessagesResult;
            this.virtualcount = virtualcount;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchoolServiceChannel : Language.Discovery.SchoolService.ISchoolService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchoolServiceClient : System.ServiceModel.ClientBase<Language.Discovery.SchoolService.ISchoolService>, Language.Discovery.SchoolService.ISchoolService {
        
        public SchoolServiceClient() {
        }
        
        public SchoolServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SchoolServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchoolServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchoolServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddSchool(Language.Discovery.Entity.SchoolContract tObject) {
            return base.Channel.AddSchool(tObject);
        }
        
        public System.Threading.Tasks.Task<int> AddSchoolAsync(Language.Discovery.Entity.SchoolContract tObject) {
            return base.Channel.AddSchoolAsync(tObject);
        }
        
        public bool UpdateSchool(Language.Discovery.Entity.SchoolContract tObject) {
            return base.Channel.UpdateSchool(tObject);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSchoolAsync(Language.Discovery.Entity.SchoolContract tObject) {
            return base.Channel.UpdateSchoolAsync(tObject);
        }
        
        public bool DeleteSchool(int id) {
            return base.Channel.DeleteSchool(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSchoolAsync(int id) {
            return base.Channel.DeleteSchoolAsync(id);
        }
        
        public Language.Discovery.Entity.SchoolContract GetByID(long id) {
            return base.Channel.GetByID(id);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.SchoolContract> GetByIDAsync(long id) {
            return base.Channel.GetByIDAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Language.Discovery.SchoolService.SearchSchoolResponse Language.Discovery.SchoolService.ISchoolService.SearchSchool(Language.Discovery.SchoolService.SearchSchoolRequest request) {
            return base.Channel.SearchSchool(request);
        }
        
        public string SearchSchool(Language.Discovery.Entity.SearchSchoolDTO tObject, out int virtualcount) {
            Language.Discovery.SchoolService.SearchSchoolRequest inValue = new Language.Discovery.SchoolService.SearchSchoolRequest();
            inValue.tObject = tObject;
            Language.Discovery.SchoolService.SearchSchoolResponse retVal = ((Language.Discovery.SchoolService.ISchoolService)(this)).SearchSchool(inValue);
            virtualcount = retVal.virtualcount;
            return retVal.SearchSchoolResult;
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.SchoolService.SearchSchoolResponse> SearchSchoolAsync(Language.Discovery.SchoolService.SearchSchoolRequest request) {
            return base.Channel.SearchSchoolAsync(request);
        }
        
        public Language.Discovery.Entity.UserMessageContract[] GetUnreadMessageForReview(long schoolid, long userid) {
            return base.Channel.GetUnreadMessageForReview(schoolid, userid);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageContract[]> GetUnreadMessageForReviewAsync(long schoolid, long userid) {
            return base.Channel.GetUnreadMessageForReviewAsync(schoolid, userid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Language.Discovery.SchoolService.GetAllMessagesResponse Language.Discovery.SchoolService.ISchoolService.GetAllMessages(Language.Discovery.SchoolService.GetAllMessagesRequest request) {
            return base.Channel.GetAllMessages(request);
        }
        
        public Language.Discovery.Entity.UserMessageContract[] GetAllMessages(Language.Discovery.Entity.MessageSearchDTO dto, out int virtualcount) {
            Language.Discovery.SchoolService.GetAllMessagesRequest inValue = new Language.Discovery.SchoolService.GetAllMessagesRequest();
            inValue.dto = dto;
            Language.Discovery.SchoolService.GetAllMessagesResponse retVal = ((Language.Discovery.SchoolService.ISchoolService)(this)).GetAllMessages(inValue);
            virtualcount = retVal.virtualcount;
            return retVal.GetAllMessagesResult;
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.SchoolService.GetAllMessagesResponse> GetAllMessagesAsync(Language.Discovery.SchoolService.GetAllMessagesRequest request) {
            return base.Channel.GetAllMessagesAsync(request);
        }
        
        public bool SetMessageAsReviewed(long usermailid, long userid, string feedbackmessage, bool isFeedBack) {
            return base.Channel.SetMessageAsReviewed(usermailid, userid, feedbackmessage, isFeedBack);
        }
        
        public System.Threading.Tasks.Task<bool> SetMessageAsReviewedAsync(long usermailid, long userid, string feedbackmessage, bool isFeedBack) {
            return base.Channel.SetMessageAsReviewedAsync(usermailid, userid, feedbackmessage, isFeedBack);
        }
        
        public bool SetMessageAsRejected(long usermailid, long userid) {
            return base.Channel.SetMessageAsRejected(usermailid, userid);
        }
        
        public System.Threading.Tasks.Task<bool> SetMessageAsRejectedAsync(long usermailid, long userid) {
            return base.Channel.SetMessageAsRejectedAsync(usermailid, userid);
        }
        
        public Language.Discovery.Entity.SchoolTypeContract[] GetSchoolTypeList() {
            return base.Channel.GetSchoolTypeList();
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.SchoolTypeContract[]> GetSchoolTypeListAsync() {
            return base.Channel.GetSchoolTypeListAsync();
        }
        
        public Language.Discovery.Entity.UserMessageContract[] GetUnreadMessageForPolling(long schoolid, long userid) {
            return base.Channel.GetUnreadMessageForPolling(schoolid, userid);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageContract[]> GetUnreadMessageForPollingAsync(long schoolid, long userid) {
            return base.Channel.GetUnreadMessageForPollingAsync(schoolid, userid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Language.Discovery.SchoolService.GetAllFreeMessagesResponse Language.Discovery.SchoolService.ISchoolService.GetAllFreeMessages(Language.Discovery.SchoolService.GetAllFreeMessagesRequest request) {
            return base.Channel.GetAllFreeMessages(request);
        }
        
        public Language.Discovery.Entity.FreeMessageContract[] GetAllFreeMessages(Language.Discovery.Entity.MessageSearchDTO dto, out int virtualcount) {
            Language.Discovery.SchoolService.GetAllFreeMessagesRequest inValue = new Language.Discovery.SchoolService.GetAllFreeMessagesRequest();
            inValue.dto = dto;
            Language.Discovery.SchoolService.GetAllFreeMessagesResponse retVal = ((Language.Discovery.SchoolService.ISchoolService)(this)).GetAllFreeMessages(inValue);
            virtualcount = retVal.virtualcount;
            return retVal.GetAllFreeMessagesResult;
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.SchoolService.GetAllFreeMessagesResponse> GetAllFreeMessagesAsync(Language.Discovery.SchoolService.GetAllFreeMessagesRequest request) {
            return base.Channel.GetAllFreeMessagesAsync(request);
        }
    }
}
