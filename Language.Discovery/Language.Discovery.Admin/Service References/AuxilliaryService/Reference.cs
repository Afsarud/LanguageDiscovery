//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Language.Discovery.Admin.AuxilliaryService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuxilliaryService.IAuxilliaryServices")]
    public interface IAuxilliaryServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchPhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchPhraseCategoryResponse")]
        string SearchPhraseCategory(string languagecode, string category, int levelid, long schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchPhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchPhraseCategoryResponse")]
        System.Threading.Tasks.Task<string> SearchPhraseCategoryAsync(string languagecode, string category, int levelid, long schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddPhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddPhraseCategoryResponse")]
        long AddPhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract pch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddPhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddPhraseCategoryResponse")]
        System.Threading.Tasks.Task<long> AddPhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract pch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryResponse")]
        bool UpdatePhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract pch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryResponse")]
        System.Threading.Tasks.Task<bool> UpdatePhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract pch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeletePhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeletePhraseCategoryResponse")]
        bool DeletePhraseCategory(long phcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeletePhraseCategory", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeletePhraseCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeletePhraseCategoryAsync(long phcid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetPhraseCategoryListToOrder", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetPhraseCategoryListToOrderResponse")]
        string GetPhraseCategoryListToOrder(string languageCode, int levelid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetPhraseCategoryListToOrder", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetPhraseCategoryListToOrderResponse")]
        System.Threading.Tasks.Task<string> GetPhraseCategoryListToOrderAsync(string languageCode, int levelid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryOrder", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryOrderResponse")]
        bool UpdatePhraseCategoryOrder(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryOrder", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdatePhraseCategoryOrderResponse")]
        System.Threading.Tasks.Task<bool> UpdatePhraseCategoryOrderAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddInfoResponse")]
        long AddInfo(Language.Discovery.Entity.InfoContract ic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddInfoResponse")]
        System.Threading.Tasks.Task<long> AddInfoAsync(Language.Discovery.Entity.InfoContract ic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateInfoResponse")]
        bool UpdateInfo(Language.Discovery.Entity.InfoContract ic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateInfoResponse")]
        System.Threading.Tasks.Task<bool> UpdateInfoAsync(Language.Discovery.Entity.InfoContract ic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteInfoResponse")]
        bool DeleteInfo(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteInfoResponse")]
        System.Threading.Tasks.Task<bool> DeleteInfoAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetInfoByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetInfoByIDResponse")]
        Language.Discovery.Entity.InfoContract GetInfoByID(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetInfoByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetInfoByIDResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.InfoContract> GetInfoByIDAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchInfoResponse")]
        Language.Discovery.Admin.AuxilliaryService.SearchInfoResponse SearchInfo(Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchInfo", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchInfoResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Admin.AuxilliaryService.SearchInfoResponse> SearchInfoAsync(Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetInfoByType", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetInfoByTypeResponse")]
        Language.Discovery.Entity.InfoContract GetInfoByType(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetInfoByType", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetInfoByTypeResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.InfoContract> GetInfoByTypeAsync(string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddFilterResponse")]
        long AddFilter(Language.Discovery.Entity.FilterContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddFilterResponse")]
        System.Threading.Tasks.Task<long> AddFilterAsync(Language.Discovery.Entity.FilterContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateFilterResponse")]
        bool UpdateFilter(Language.Discovery.Entity.FilterContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateFilterResponse")]
        System.Threading.Tasks.Task<bool> UpdateFilterAsync(Language.Discovery.Entity.FilterContract fc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteFilterResponse")]
        bool DeleteFilter(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteFilterResponse")]
        System.Threading.Tasks.Task<bool> DeleteFilterAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchFilterResponse")]
        string SearchFilter(string filtername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchFilter", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchFilterResponse")]
        System.Threading.Tasks.Task<string> SearchFilterAsync(string filtername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetFilterByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetFilterByIDResponse")]
        Language.Discovery.Entity.FilterContract GetFilterByID(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetFilterByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetFilterByIDResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.FilterContract> GetFilterByIDAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetClassList", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetClassListResponse")]
        string GetClassList(int schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetClassList", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetClassListResponse")]
        System.Threading.Tasks.Task<string> GetClassListAsync(int schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetClassByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetClassByIDResponse")]
        Language.Discovery.Entity.ClassContract GetClassByID(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetClassByID", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetClassByIDResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.ClassContract> GetClassByIDAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteClassResponse")]
        bool DeleteClass(int classid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/DeleteClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/DeleteClassResponse")]
        System.Threading.Tasks.Task<bool> DeleteClassAsync(int classid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateClassResponse")]
        bool UpdateClass(Language.Discovery.Entity.ClassContract cc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/UpdateClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/UpdateClassResponse")]
        System.Threading.Tasks.Task<bool> UpdateClassAsync(Language.Discovery.Entity.ClassContract cc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddClassResponse")]
        int AddClass(Language.Discovery.Entity.ClassContract cc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/AddClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/AddClassResponse")]
        System.Threading.Tasks.Task<int> AddClassAsync(Language.Discovery.Entity.ClassContract cc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchClassResponse")]
        string SearchClass(string classname, int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/SearchClass", ReplyAction="http://tempuri.org/IAuxilliaryServices/SearchClassResponse")]
        System.Threading.Tasks.Task<string> SearchClassAsync(string classname, int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetGradeList", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetGradeListResponse")]
        Language.Discovery.Entity.GradeContract[] GetGradeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuxilliaryServices/GetGradeList", ReplyAction="http://tempuri.org/IAuxilliaryServices/GetGradeListResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.GradeContract[]> GetGradeListAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.SearchInfoDTO dto;
        
        public SearchInfoRequest() {
        }
        
        public SearchInfoRequest(Language.Discovery.Entity.SearchInfoDTO dto) {
            this.dto = dto;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.InfoContract[] SearchInfoResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int virtualcount;
        
        public SearchInfoResponse() {
        }
        
        public SearchInfoResponse(Language.Discovery.Entity.InfoContract[] SearchInfoResult, int virtualcount) {
            this.SearchInfoResult = SearchInfoResult;
            this.virtualcount = virtualcount;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuxilliaryServicesChannel : Language.Discovery.Admin.AuxilliaryService.IAuxilliaryServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuxilliaryServicesClient : System.ServiceModel.ClientBase<Language.Discovery.Admin.AuxilliaryService.IAuxilliaryServices>, Language.Discovery.Admin.AuxilliaryService.IAuxilliaryServices {
        
        public AuxilliaryServicesClient() {
        }
        
        public AuxilliaryServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuxilliaryServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuxilliaryServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuxilliaryServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SearchPhraseCategory(string languagecode, string category, int levelid, long schoolid) {
            return base.Channel.SearchPhraseCategory(languagecode, category, levelid, schoolid);
        }
        
        public System.Threading.Tasks.Task<string> SearchPhraseCategoryAsync(string languagecode, string category, int levelid, long schoolid) {
            return base.Channel.SearchPhraseCategoryAsync(languagecode, category, levelid, schoolid);
        }
        
        public long AddPhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract pch) {
            return base.Channel.AddPhraseCategory(pch);
        }
        
        public System.Threading.Tasks.Task<long> AddPhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract pch) {
            return base.Channel.AddPhraseCategoryAsync(pch);
        }
        
        public bool UpdatePhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract pch) {
            return base.Channel.UpdatePhraseCategory(pch);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract pch) {
            return base.Channel.UpdatePhraseCategoryAsync(pch);
        }
        
        public bool DeletePhraseCategory(long phcid) {
            return base.Channel.DeletePhraseCategory(phcid);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePhraseCategoryAsync(long phcid) {
            return base.Channel.DeletePhraseCategoryAsync(phcid);
        }
        
        public string GetPhraseCategoryListToOrder(string languageCode, int levelid) {
            return base.Channel.GetPhraseCategoryListToOrder(languageCode, levelid);
        }
        
        public System.Threading.Tasks.Task<string> GetPhraseCategoryListToOrderAsync(string languageCode, int levelid) {
            return base.Channel.GetPhraseCategoryListToOrderAsync(languageCode, levelid);
        }
        
        public bool UpdatePhraseCategoryOrder(string xml) {
            return base.Channel.UpdatePhraseCategoryOrder(xml);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePhraseCategoryOrderAsync(string xml) {
            return base.Channel.UpdatePhraseCategoryOrderAsync(xml);
        }
        
        public long AddInfo(Language.Discovery.Entity.InfoContract ic) {
            return base.Channel.AddInfo(ic);
        }
        
        public System.Threading.Tasks.Task<long> AddInfoAsync(Language.Discovery.Entity.InfoContract ic) {
            return base.Channel.AddInfoAsync(ic);
        }
        
        public bool UpdateInfo(Language.Discovery.Entity.InfoContract ic) {
            return base.Channel.UpdateInfo(ic);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInfoAsync(Language.Discovery.Entity.InfoContract ic) {
            return base.Channel.UpdateInfoAsync(ic);
        }
        
        public bool DeleteInfo(long id) {
            return base.Channel.DeleteInfo(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInfoAsync(long id) {
            return base.Channel.DeleteInfoAsync(id);
        }
        
        public Language.Discovery.Entity.InfoContract GetInfoByID(long id) {
            return base.Channel.GetInfoByID(id);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.InfoContract> GetInfoByIDAsync(long id) {
            return base.Channel.GetInfoByIDAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Language.Discovery.Admin.AuxilliaryService.SearchInfoResponse Language.Discovery.Admin.AuxilliaryService.IAuxilliaryServices.SearchInfo(Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest request) {
            return base.Channel.SearchInfo(request);
        }
        
        public Language.Discovery.Entity.InfoContract[] SearchInfo(Language.Discovery.Entity.SearchInfoDTO dto, out int virtualcount) {
            Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest inValue = new Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest();
            inValue.dto = dto;
            Language.Discovery.Admin.AuxilliaryService.SearchInfoResponse retVal = ((Language.Discovery.Admin.AuxilliaryService.IAuxilliaryServices)(this)).SearchInfo(inValue);
            virtualcount = retVal.virtualcount;
            return retVal.SearchInfoResult;
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Admin.AuxilliaryService.SearchInfoResponse> SearchInfoAsync(Language.Discovery.Admin.AuxilliaryService.SearchInfoRequest request) {
            return base.Channel.SearchInfoAsync(request);
        }
        
        public Language.Discovery.Entity.InfoContract GetInfoByType(string type) {
            return base.Channel.GetInfoByType(type);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.InfoContract> GetInfoByTypeAsync(string type) {
            return base.Channel.GetInfoByTypeAsync(type);
        }
        
        public long AddFilter(Language.Discovery.Entity.FilterContract fc) {
            return base.Channel.AddFilter(fc);
        }
        
        public System.Threading.Tasks.Task<long> AddFilterAsync(Language.Discovery.Entity.FilterContract fc) {
            return base.Channel.AddFilterAsync(fc);
        }
        
        public bool UpdateFilter(Language.Discovery.Entity.FilterContract fc) {
            return base.Channel.UpdateFilter(fc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFilterAsync(Language.Discovery.Entity.FilterContract fc) {
            return base.Channel.UpdateFilterAsync(fc);
        }
        
        public bool DeleteFilter(long id) {
            return base.Channel.DeleteFilter(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFilterAsync(long id) {
            return base.Channel.DeleteFilterAsync(id);
        }
        
        public string SearchFilter(string filtername) {
            return base.Channel.SearchFilter(filtername);
        }
        
        public System.Threading.Tasks.Task<string> SearchFilterAsync(string filtername) {
            return base.Channel.SearchFilterAsync(filtername);
        }
        
        public Language.Discovery.Entity.FilterContract GetFilterByID(long id) {
            return base.Channel.GetFilterByID(id);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.FilterContract> GetFilterByIDAsync(long id) {
            return base.Channel.GetFilterByIDAsync(id);
        }
        
        public string GetClassList(int schoolid) {
            return base.Channel.GetClassList(schoolid);
        }
        
        public System.Threading.Tasks.Task<string> GetClassListAsync(int schoolid) {
            return base.Channel.GetClassListAsync(schoolid);
        }
        
        public Language.Discovery.Entity.ClassContract GetClassByID(long id) {
            return base.Channel.GetClassByID(id);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.ClassContract> GetClassByIDAsync(long id) {
            return base.Channel.GetClassByIDAsync(id);
        }
        
        public bool DeleteClass(int classid) {
            return base.Channel.DeleteClass(classid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClassAsync(int classid) {
            return base.Channel.DeleteClassAsync(classid);
        }
        
        public bool UpdateClass(Language.Discovery.Entity.ClassContract cc) {
            return base.Channel.UpdateClass(cc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClassAsync(Language.Discovery.Entity.ClassContract cc) {
            return base.Channel.UpdateClassAsync(cc);
        }
        
        public int AddClass(Language.Discovery.Entity.ClassContract cc) {
            return base.Channel.AddClass(cc);
        }
        
        public System.Threading.Tasks.Task<int> AddClassAsync(Language.Discovery.Entity.ClassContract cc) {
            return base.Channel.AddClassAsync(cc);
        }
        
        public string SearchClass(string classname, int schoolID) {
            return base.Channel.SearchClass(classname, schoolID);
        }
        
        public System.Threading.Tasks.Task<string> SearchClassAsync(string classname, int schoolID) {
            return base.Channel.SearchClassAsync(classname, schoolID);
        }
        
        public Language.Discovery.Entity.GradeContract[] GetGradeList() {
            return base.Channel.GetGradeList();
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.GradeContract[]> GetGradeListAsync() {
            return base.Channel.GetGradeListAsync();
        }
    }
}
