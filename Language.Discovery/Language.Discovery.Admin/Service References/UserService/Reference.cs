//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Language.Discovery.Admin.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Authenticate", ReplyAction="http://tempuri.org/IUser/AuthenticateResponse")]
        string Authenticate(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Authenticate", ReplyAction="http://tempuri.org/IUser/AuthenticateResponse")]
        System.Threading.Tasks.Task<string> AuthenticateAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AuthenticateAdmin", ReplyAction="http://tempuri.org/IUser/AuthenticateAdminResponse")]
        string AuthenticateAdmin(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AuthenticateAdmin", ReplyAction="http://tempuri.org/IUser/AuthenticateAdminResponse")]
        System.Threading.Tasks.Task<string> AuthenticateAdminAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SaveImage", ReplyAction="http://tempuri.org/IUser/SaveImageResponse")]
        bool SaveImage(long userID, Language.Discovery.Entity.PhotoContract photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SaveImage", ReplyAction="http://tempuri.org/IUser/SaveImageResponse")]
        System.Threading.Tasks.Task<bool> SaveImageAsync(long userID, Language.Discovery.Entity.PhotoContract photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserPhoto", ReplyAction="http://tempuri.org/IUser/GetUserPhotoResponse")]
        string GetUserPhoto(long userID, long albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserPhoto", ReplyAction="http://tempuri.org/IUser/GetUserPhotoResponse")]
        System.Threading.Tasks.Task<string> GetUserPhotoAsync(long userID, long albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetWhoLikedMe", ReplyAction="http://tempuri.org/IUser/GetWhoLikedMeResponse")]
        string GetWhoLikedMe(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetWhoLikedMe", ReplyAction="http://tempuri.org/IUser/GetWhoLikedMeResponse")]
        System.Threading.Tasks.Task<string> GetWhoLikedMeAsync(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserStatus", ReplyAction="http://tempuri.org/IUser/UpdateUserStatusResponse")]
        bool UpdateUserStatus(long userID, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserStatus", ReplyAction="http://tempuri.org/IUser/UpdateUserStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserStatusAsync(long userID, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAvatar", ReplyAction="http://tempuri.org/IUser/UpdateUserAvatarResponse")]
        bool UpdateUserAvatar(long userID, string avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAvatar", ReplyAction="http://tempuri.org/IUser/UpdateUserAvatarResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAvatarAsync(long userID, string avatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserDetails", ReplyAction="http://tempuri.org/IUser/GetUserDetailsResponse")]
        string GetUserDetails(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserDetails", ReplyAction="http://tempuri.org/IUser/GetUserDetailsResponse")]
        System.Threading.Tasks.Task<string> GetUserDetailsAsync(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserFriends", ReplyAction="http://tempuri.org/IUser/GetUserFriendsResponse")]
        string GetUserFriends(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserFriends", ReplyAction="http://tempuri.org/IUser/GetUserFriendsResponse")]
        System.Threading.Tasks.Task<string> GetUserFriendsAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserDetailsByUserName", ReplyAction="http://tempuri.org/IUser/GetUserDetailsByUserNameResponse")]
        string GetUserDetailsByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserDetailsByUserName", ReplyAction="http://tempuri.org/IUser/GetUserDetailsByUserNameResponse")]
        System.Threading.Tasks.Task<string> GetUserDetailsByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUser", ReplyAction="http://tempuri.org/IUser/SearchUserResponse")]
        string SearchUser(string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUser", ReplyAction="http://tempuri.org/IUser/SearchUserResponse")]
        System.Threading.Tasks.Task<string> SearchUserAsync(string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriendsResponse")]
        string DiscoverNewFriends(int[] interestids, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriendsResponse")]
        System.Threading.Tasks.Task<string> DiscoverNewFriendsAsync(int[] interestids, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends2", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriends2Response")]
        string DiscoverNewFriends2(int[] interestids, int cityid, string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends2", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriends2Response")]
        System.Threading.Tasks.Task<string> DiscoverNewFriends2Async(int[] interestids, int cityid, string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends3", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriends3Response")]
        string DiscoverNewFriends3(Language.Discovery.Entity.DiscoverNewFriendsDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DiscoverNewFriends3", ReplyAction="http://tempuri.org/IUser/DiscoverNewFriends3Response")]
        System.Threading.Tasks.Task<string> DiscoverNewFriends3Async(Language.Discovery.Entity.DiscoverNewFriendsDTO dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUserWithMessage", ReplyAction="http://tempuri.org/IUser/SearchUserWithMessageResponse")]
        string SearchUserWithMessage(string name, long searcheeid, Language.Discovery.Entity.MailBoxUserType mailboxUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUserWithMessage", ReplyAction="http://tempuri.org/IUser/SearchUserWithMessageResponse")]
        System.Threading.Tasks.Task<string> SearchUserWithMessageAsync(string name, long searcheeid, Language.Discovery.Entity.MailBoxUserType mailboxUserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddFriend", ReplyAction="http://tempuri.org/IUser/AddFriendResponse")]
        bool AddFriend(long userID, long useridtoadd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddFriend", ReplyAction="http://tempuri.org/IUser/AddFriendResponse")]
        System.Threading.Tasks.Task<bool> AddFriendAsync(long userID, long useridtoadd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UnFriend", ReplyAction="http://tempuri.org/IUser/UnFriendResponse")]
        bool UnFriend(long userID, long useridtounfriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UnFriend", ReplyAction="http://tempuri.org/IUser/UnFriendResponse")]
        System.Threading.Tasks.Task<bool> UnFriendAsync(long userID, long useridtounfriend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUserPhoto", ReplyAction="http://tempuri.org/IUser/DeleteUserPhotoResponse")]
        bool DeleteUserPhoto(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUserPhoto", ReplyAction="http://tempuri.org/IUser/DeleteUserPhotoResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserPhotoAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdatePhotoDescription", ReplyAction="http://tempuri.org/IUser/UpdatePhotoDescriptionResponse")]
        bool UpdatePhotoDescription(long userPhotoId, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdatePhotoDescription", ReplyAction="http://tempuri.org/IUser/UpdatePhotoDescriptionResponse")]
        System.Threading.Tasks.Task<bool> UpdatePhotoDescriptionAsync(long userPhotoId, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchPeople", ReplyAction="http://tempuri.org/IUser/SearchPeopleResponse")]
        string SearchPeople(int countryid, int cityid, string type, string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchPeople", ReplyAction="http://tempuri.org/IUser/SearchPeopleResponse")]
        System.Threading.Tasks.Task<string> SearchPeopleAsync(int countryid, int cityid, string type, string name, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLike", ReplyAction="http://tempuri.org/IUser/LikeUnLikeResponse")]
        bool LikeUnLike(long userID, long userIDToLike, long userstatusid, bool iscurrentLike);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLike", ReplyAction="http://tempuri.org/IUser/LikeUnLikeResponse")]
        System.Threading.Tasks.Task<bool> LikeUnLikeAsync(long userID, long userIDToLike, long userstatusid, bool iscurrentLike);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLikePhoto", ReplyAction="http://tempuri.org/IUser/LikeUnLikePhotoResponse")]
        bool LikeUnLikePhoto(long userID, long userPhotoID, bool iscurrentLike);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLikePhoto", ReplyAction="http://tempuri.org/IUser/LikeUnLikePhotoResponse")]
        System.Threading.Tasks.Task<bool> LikeUnLikePhotoAsync(long userID, long userPhotoID, bool iscurrentLike);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageTrailBySenderID", ReplyAction="http://tempuri.org/IUser/GetMessageTrailBySenderIDResponse")]
        string GetMessageTrailBySenderID(long senderid, long recepientid, int pagenumber, int rowsperpage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageTrailBySenderID", ReplyAction="http://tempuri.org/IUser/GetMessageTrailBySenderIDResponse")]
        System.Threading.Tasks.Task<string> GetMessageTrailBySenderIDAsync(long senderid, long recepientid, int pagenumber, int rowsperpage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SaveMessage", ReplyAction="http://tempuri.org/IUser/SaveMessageResponse")]
        long[] SaveMessage(string json);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SaveMessage", ReplyAction="http://tempuri.org/IUser/SaveMessageResponse")]
        System.Threading.Tasks.Task<long[]> SaveMessageAsync(string json);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUnreadMessage", ReplyAction="http://tempuri.org/IUser/GetUnreadMessageResponse")]
        int GetUnreadMessage(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUnreadMessage", ReplyAction="http://tempuri.org/IUser/GetUnreadMessageResponse")]
        System.Threading.Tasks.Task<int> GetUnreadMessageAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/MarkMessageAsRead", ReplyAction="http://tempuri.org/IUser/MarkMessageAsReadResponse")]
        bool MarkMessageAsRead(long senderid, long recipientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/MarkMessageAsRead", ReplyAction="http://tempuri.org/IUser/MarkMessageAsReadResponse")]
        System.Threading.Tasks.Task<bool> MarkMessageAsReadAsync(long senderid, long recipientid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/IsILike", ReplyAction="http://tempuri.org/IUser/IsILikeResponse")]
        bool IsILike(long userid, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/IsILike", ReplyAction="http://tempuri.org/IUser/IsILikeResponse")]
        System.Threading.Tasks.Task<bool> IsILikeAsync(long userid, long searcheeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserInterest", ReplyAction="http://tempuri.org/IUser/GetUserInterestResponse")]
        Language.Discovery.Entity.UserInterestContract[] GetUserInterest(long userid, string languagecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserInterest", ReplyAction="http://tempuri.org/IUser/GetUserInterestResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserInterestContract[]> GetUserInterestAsync(long userid, string languagecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserInterest", ReplyAction="http://tempuri.org/IUser/UpdateUserInterestResponse")]
        bool UpdateUserInterest(Language.Discovery.Entity.UserInterestContract[] interestlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserInterest", ReplyAction="http://tempuri.org/IUser/UpdateUserInterestResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserInterestAsync(Language.Discovery.Entity.UserInterestContract[] interestlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUser", ReplyAction="http://tempuri.org/IUser/AddUserResponse")]
        int AddUser(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUser", ReplyAction="http://tempuri.org/IUser/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUser", ReplyAction="http://tempuri.org/IUser/UpdateUserResponse")]
        bool UpdateUser(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUser", ReplyAction="http://tempuri.org/IUser/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUser", ReplyAction="http://tempuri.org/IUser/DeleteUserResponse")]
        bool DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUser", ReplyAction="http://tempuri.org/IUser/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetByID", ReplyAction="http://tempuri.org/IUser/GetByIDResponse")]
        Language.Discovery.Entity.UserContract GetByID(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetByID", ReplyAction="http://tempuri.org/IUser/GetByIDResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract> GetByIDAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUserAdmin", ReplyAction="http://tempuri.org/IUser/SearchUserAdminResponse")]
        Language.Discovery.Admin.UserService.SearchUserAdminResponse SearchUserAdmin(Language.Discovery.Admin.UserService.SearchUserAdminRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SearchUserAdmin", ReplyAction="http://tempuri.org/IUser/SearchUserAdminResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Admin.UserService.SearchUserAdminResponse> SearchUserAdminAsync(Language.Discovery.Admin.UserService.SearchUserAdminRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SignOut", ReplyAction="http://tempuri.org/IUser/SignOutResponse")]
        bool SignOut(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SignOut", ReplyAction="http://tempuri.org/IUser/SignOutResponse")]
        System.Threading.Tasks.Task<bool> SignOutAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAboutMe", ReplyAction="http://tempuri.org/IUser/UpdateUserAboutMeResponse")]
        bool UpdateUserAboutMe(Language.Discovery.Entity.UserAboutMeContract[] aboutmelist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAboutMe", ReplyAction="http://tempuri.org/IUser/UpdateUserAboutMeResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAboutMeAsync(Language.Discovery.Entity.UserAboutMeContract[] aboutmelist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserAboutMe", ReplyAction="http://tempuri.org/IUser/GetUserAboutMeResponse")]
        Language.Discovery.Entity.UserAboutMeContract[] GetUserAboutMe(long userid, string languagecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserAboutMe", ReplyAction="http://tempuri.org/IUser/GetUserAboutMeResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserAboutMeContract[]> GetUserAboutMeAsync(long userid, string languagecode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateOtherUserInfo", ReplyAction="http://tempuri.org/IUser/UpdateOtherUserInfoResponse")]
        bool UpdateOtherUserInfo(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateOtherUserInfo", ReplyAction="http://tempuri.org/IUser/UpdateOtherUserInfoResponse")]
        System.Threading.Tasks.Task<bool> UpdateOtherUserInfoAsync(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertBulkUser", ReplyAction="http://tempuri.org/IUser/InsertBulkUserResponse")]
        bool InsertBulkUser(int schoolid, Language.Discovery.Entity.UserContract[] tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertBulkUser", ReplyAction="http://tempuri.org/IUser/InsertBulkUserResponse")]
        System.Threading.Tasks.Task<bool> InsertBulkUserAsync(int schoolid, Language.Discovery.Entity.UserContract[] tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserActivity", ReplyAction="http://tempuri.org/IUser/UpdateUserActivityResponse")]
        bool UpdateUserActivity(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserActivity", ReplyAction="http://tempuri.org/IUser/UpdateUserActivityResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserActivityAsync(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetDuplicateUsers", ReplyAction="http://tempuri.org/IUser/GetDuplicateUsersResponse")]
        string GetDuplicateUsers(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetDuplicateUsers", ReplyAction="http://tempuri.org/IUser/GetDuplicateUsersResponse")]
        System.Threading.Tasks.Task<string> GetDuplicateUsersAsync(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageDetailByUserMailID", ReplyAction="http://tempuri.org/IUser/GetMessageDetailByUserMailIDResponse")]
        string GetMessageDetailByUserMailID(long userMailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageDetailByUserMailID", ReplyAction="http://tempuri.org/IUser/GetMessageDetailByUserMailIDResponse")]
        System.Threading.Tasks.Task<string> GetMessageDetailByUserMailIDAsync(long userMailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddVIPUser", ReplyAction="http://tempuri.org/IUser/AddVIPUserResponse")]
        bool AddVIPUser(Language.Discovery.Entity.VIPContract[] viplist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddVIPUser", ReplyAction="http://tempuri.org/IUser/AddVIPUserResponse")]
        System.Threading.Tasks.Task<bool> AddVIPUserAsync(Language.Discovery.Entity.VIPContract[] viplist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveVIPUser", ReplyAction="http://tempuri.org/IUser/RemoveVIPUserResponse")]
        bool RemoveVIPUser(Language.Discovery.Entity.VIPContract[] viplist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RemoveVIPUser", ReplyAction="http://tempuri.org/IUser/RemoveVIPUserResponse")]
        System.Threading.Tasks.Task<bool> RemoveVIPUserAsync(Language.Discovery.Entity.VIPContract[] viplist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLikeMessage", ReplyAction="http://tempuri.org/IUser/LikeUnLikeMessageResponse")]
        bool LikeUnLikeMessage(long usermailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LikeUnLikeMessage", ReplyAction="http://tempuri.org/IUser/LikeUnLikeMessageResponse")]
        System.Threading.Tasks.Task<bool> LikeUnLikeMessageAsync(long usermailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserMessageLikeRanking", ReplyAction="http://tempuri.org/IUser/GetUserMessageLikeRankingResponse")]
        Language.Discovery.Entity.UserMessageLikeRankingContract[] GetUserMessageLikeRanking(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserMessageLikeRanking", ReplyAction="http://tempuri.org/IUser/GetUserMessageLikeRankingResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageLikeRankingContract[]> GetUserMessageLikeRankingAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserTheme", ReplyAction="http://tempuri.org/IUser/UpdateUserThemeResponse")]
        bool UpdateUserTheme(long userid, string theme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserTheme", ReplyAction="http://tempuri.org/IUser/UpdateUserThemeResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserThemeAsync(long userid, string theme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserDontShowVideo", ReplyAction="http://tempuri.org/IUser/UpdateUserDontShowVideoResponse")]
        bool UpdateUserDontShowVideo(long userid, bool dontshowvideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserDontShowVideo", ReplyAction="http://tempuri.org/IUser/UpdateUserDontShowVideoResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserDontShowVideoAsync(long userid, bool dontshowvideo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserDontShowNewTab", ReplyAction="http://tempuri.org/IUser/UpdateUserDontShowNewTabResponse")]
        bool UpdateUserDontShowNewTab(long userid, bool dontshownewtab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserDontShowNewTab", ReplyAction="http://tempuri.org/IUser/UpdateUserDontShowNewTabResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserDontShowNewTabAsync(long userid, bool dontshownewtab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserSkin", ReplyAction="http://tempuri.org/IUser/UpdateUserSkinResponse")]
        bool UpdateUserSkin(long userid, string skin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserSkin", ReplyAction="http://tempuri.org/IUser/UpdateUserSkinResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserSkinAsync(long userid, string skin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/IsAfterSchoolTime", ReplyAction="http://tempuri.org/IUser/IsAfterSchoolTimeResponse")]
        bool IsAfterSchoolTime(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/IsAfterSchoolTime", ReplyAction="http://tempuri.org/IUser/IsAfterSchoolTimeResponse")]
        System.Threading.Tasks.Task<bool> IsAfterSchoolTimeAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAfterSchoolStatus", ReplyAction="http://tempuri.org/IUser/UpdateUserAfterSchoolStatusResponse")]
        bool UpdateUserAfterSchoolStatus(long userid, bool isaftershool, string parentsname, string parentsgivenname, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserAfterSchoolStatus", ReplyAction="http://tempuri.org/IUser/UpdateUserAfterSchoolStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAfterSchoolStatusAsync(long userid, bool isaftershool, string parentsname, string parentsgivenname, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserListBySchool", ReplyAction="http://tempuri.org/IUser/GetUserListBySchoolResponse")]
        Language.Discovery.Entity.UserContract[] GetUserListBySchool(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserListBySchool", ReplyAction="http://tempuri.org/IUser/GetUserListBySchoolResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserListBySchoolAsync(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetDSUserListBySchool", ReplyAction="http://tempuri.org/IUser/GetDSUserListBySchoolResponse")]
        string GetDSUserListBySchool(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetDSUserListBySchool", ReplyAction="http://tempuri.org/IUser/GetDSUserListBySchoolResponse")]
        System.Threading.Tasks.Task<string> GetDSUserListBySchoolAsync(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertUpdateBulkUser", ReplyAction="http://tempuri.org/IUser/InsertUpdateBulkUserResponse")]
        bool InsertUpdateBulkUser(int schoolid, Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertUpdateBulkUser", ReplyAction="http://tempuri.org/IUser/InsertUpdateBulkUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUpdateBulkUserAsync(int schoolid, Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUserMail", ReplyAction="http://tempuri.org/IUser/DeleteUserMailResponse")]
        bool DeleteUserMail(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/DeleteUserMail", ReplyAction="http://tempuri.org/IUser/DeleteUserMailResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserMailAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RegisterUser", ReplyAction="http://tempuri.org/IUser/RegisterUserResponse")]
        long RegisterUser(Language.Discovery.Entity.UserContract uc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/RegisterUser", ReplyAction="http://tempuri.org/IUser/RegisterUserResponse")]
        System.Threading.Tasks.Task<long> RegisterUserAsync(Language.Discovery.Entity.UserContract uc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserListBySchoolForTrackingOrProgress", ReplyAction="http://tempuri.org/IUser/GetUserListBySchoolForTrackingOrProgressResponse")]
        Language.Discovery.Entity.UserContract[] GetUserListBySchoolForTrackingOrProgress(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserListBySchoolForTrackingOrProgress", ReplyAction="http://tempuri.org/IUser/GetUserListBySchoolForTrackingOrProgressResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserListBySchoolForTrackingOrProgressAsync(int schoolID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserTrackProgress", ReplyAction="http://tempuri.org/IUser/UpdateUserTrackProgressResponse")]
        bool UpdateUserTrackProgress(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserTrackProgress", ReplyAction="http://tempuri.org/IUser/UpdateUserTrackProgressResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserTrackProgressAsync(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserOptions", ReplyAction="http://tempuri.org/IUser/UpdateUserOptionsResponse")]
        bool UpdateUserOptions(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateUserOptions", ReplyAction="http://tempuri.org/IUser/UpdateUserOptionsResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserOptionsAsync(Language.Discovery.Entity.UserContract tObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertFreeMessage", ReplyAction="http://tempuri.org/IUser/InsertFreeMessageResponse")]
        bool InsertFreeMessage(Language.Discovery.Entity.FreeMessageContract[] messageList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InsertFreeMessage", ReplyAction="http://tempuri.org/IUser/InsertFreeMessageResponse")]
        System.Threading.Tasks.Task<bool> InsertFreeMessageAsync(Language.Discovery.Entity.FreeMessageContract[] messageList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByIDs", ReplyAction="http://tempuri.org/IUser/GetUserByIDsResponse")]
        Language.Discovery.Entity.UserContract[] GetUserByIDs(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByIDs", ReplyAction="http://tempuri.org/IUser/GetUserByIDsResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserByIDsAsync(Language.Discovery.Entity.UserContract[] userlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SendAutoMail", ReplyAction="http://tempuri.org/IUser/SendAutoMailResponse")]
        bool SendAutoMail(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/SendAutoMail", ReplyAction="http://tempuri.org/IUser/SendAutoMailResponse")]
        System.Threading.Tasks.Task<bool> SendAutoMailAsync(long userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/MarkMessageAsUnRead", ReplyAction="http://tempuri.org/IUser/MarkMessageAsUnReadResponse")]
        bool MarkMessageAsUnRead(long senderid, long recipientid, long[] mailList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/MarkMessageAsUnRead", ReplyAction="http://tempuri.org/IUser/MarkMessageAsUnReadResponse")]
        System.Threading.Tasks.Task<bool> MarkMessageAsUnReadAsync(long senderid, long recipientid, long[] mailList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageCountThatNeedsReply", ReplyAction="http://tempuri.org/IUser/GetMessageCountThatNeedsReplyResponse")]
        int GetMessageCountThatNeedsReply(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMessageCountThatNeedsReply", ReplyAction="http://tempuri.org/IUser/GetMessageCountThatNeedsReplyResponse")]
        System.Threading.Tasks.Task<int> GetMessageCountThatNeedsReplyAsync(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMailMessages", ReplyAction="http://tempuri.org/IUser/GetMailMessagesResponse")]
        string GetMailMessages(string type, long senderid, long recepientid, int pagenumber, int rowsperpage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetMailMessages", ReplyAction="http://tempuri.org/IUser/GetMailMessagesResponse")]
        System.Threading.Tasks.Task<string> GetMailMessagesAsync(string type, long senderid, long recepientid, int pagenumber, int rowsperpage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetLatestMessage", ReplyAction="http://tempuri.org/IUser/GetLatestMessageResponse")]
        Language.Discovery.Entity.UserContract GetLatestMessage(long userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetLatestMessage", ReplyAction="http://tempuri.org/IUser/GetLatestMessageResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract> GetLatestMessageAsync(long userid);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchUserAdmin", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchUserAdminRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public Language.Discovery.Entity.SearchUserDTO tObject;
        
        public SearchUserAdminRequest() {
        }
        
        public SearchUserAdminRequest(Language.Discovery.Entity.SearchUserDTO tObject) {
            this.tObject = tObject;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchUserAdminResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchUserAdminResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string SearchUserAdminResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int virtualcount;
        
        public SearchUserAdminResponse() {
        }
        
        public SearchUserAdminResponse(string SearchUserAdminResult, int virtualcount) {
            this.SearchUserAdminResult = SearchUserAdminResult;
            this.virtualcount = virtualcount;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : Language.Discovery.Admin.UserService.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<Language.Discovery.Admin.UserService.IUser>, Language.Discovery.Admin.UserService.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Authenticate(string username, string password) {
            return base.Channel.Authenticate(username, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateAsync(string username, string password) {
            return base.Channel.AuthenticateAsync(username, password);
        }
        
        public string AuthenticateAdmin(string username, string password) {
            return base.Channel.AuthenticateAdmin(username, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateAdminAsync(string username, string password) {
            return base.Channel.AuthenticateAdminAsync(username, password);
        }
        
        public bool SaveImage(long userID, Language.Discovery.Entity.PhotoContract photo) {
            return base.Channel.SaveImage(userID, photo);
        }
        
        public System.Threading.Tasks.Task<bool> SaveImageAsync(long userID, Language.Discovery.Entity.PhotoContract photo) {
            return base.Channel.SaveImageAsync(userID, photo);
        }
        
        public string GetUserPhoto(long userID, long albumID) {
            return base.Channel.GetUserPhoto(userID, albumID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserPhotoAsync(long userID, long albumID) {
            return base.Channel.GetUserPhotoAsync(userID, albumID);
        }
        
        public string GetWhoLikedMe(long userID) {
            return base.Channel.GetWhoLikedMe(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetWhoLikedMeAsync(long userID) {
            return base.Channel.GetWhoLikedMeAsync(userID);
        }
        
        public bool UpdateUserStatus(long userID, string status) {
            return base.Channel.UpdateUserStatus(userID, status);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserStatusAsync(long userID, string status) {
            return base.Channel.UpdateUserStatusAsync(userID, status);
        }
        
        public bool UpdateUserAvatar(long userID, string avatar) {
            return base.Channel.UpdateUserAvatar(userID, avatar);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAvatarAsync(long userID, string avatar) {
            return base.Channel.UpdateUserAvatarAsync(userID, avatar);
        }
        
        public string GetUserDetails(long userID) {
            return base.Channel.GetUserDetails(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDetailsAsync(long userID) {
            return base.Channel.GetUserDetailsAsync(userID);
        }
        
        public string GetUserFriends(long userid) {
            return base.Channel.GetUserFriends(userid);
        }
        
        public System.Threading.Tasks.Task<string> GetUserFriendsAsync(long userid) {
            return base.Channel.GetUserFriendsAsync(userid);
        }
        
        public string GetUserDetailsByUserName(string userName) {
            return base.Channel.GetUserDetailsByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDetailsByUserNameAsync(string userName) {
            return base.Channel.GetUserDetailsByUserNameAsync(userName);
        }
        
        public string SearchUser(string name, long searcheeid) {
            return base.Channel.SearchUser(name, searcheeid);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserAsync(string name, long searcheeid) {
            return base.Channel.SearchUserAsync(name, searcheeid);
        }
        
        public string DiscoverNewFriends(int[] interestids, long searcheeid) {
            return base.Channel.DiscoverNewFriends(interestids, searcheeid);
        }
        
        public System.Threading.Tasks.Task<string> DiscoverNewFriendsAsync(int[] interestids, long searcheeid) {
            return base.Channel.DiscoverNewFriendsAsync(interestids, searcheeid);
        }
        
        public string DiscoverNewFriends2(int[] interestids, int cityid, string name, long searcheeid) {
            return base.Channel.DiscoverNewFriends2(interestids, cityid, name, searcheeid);
        }
        
        public System.Threading.Tasks.Task<string> DiscoverNewFriends2Async(int[] interestids, int cityid, string name, long searcheeid) {
            return base.Channel.DiscoverNewFriends2Async(interestids, cityid, name, searcheeid);
        }
        
        public string DiscoverNewFriends3(Language.Discovery.Entity.DiscoverNewFriendsDTO dto) {
            return base.Channel.DiscoverNewFriends3(dto);
        }
        
        public System.Threading.Tasks.Task<string> DiscoverNewFriends3Async(Language.Discovery.Entity.DiscoverNewFriendsDTO dto) {
            return base.Channel.DiscoverNewFriends3Async(dto);
        }
        
        public string SearchUserWithMessage(string name, long searcheeid, Language.Discovery.Entity.MailBoxUserType mailboxUserType) {
            return base.Channel.SearchUserWithMessage(name, searcheeid, mailboxUserType);
        }
        
        public System.Threading.Tasks.Task<string> SearchUserWithMessageAsync(string name, long searcheeid, Language.Discovery.Entity.MailBoxUserType mailboxUserType) {
            return base.Channel.SearchUserWithMessageAsync(name, searcheeid, mailboxUserType);
        }
        
        public bool AddFriend(long userID, long useridtoadd) {
            return base.Channel.AddFriend(userID, useridtoadd);
        }
        
        public System.Threading.Tasks.Task<bool> AddFriendAsync(long userID, long useridtoadd) {
            return base.Channel.AddFriendAsync(userID, useridtoadd);
        }
        
        public bool UnFriend(long userID, long useridtounfriend) {
            return base.Channel.UnFriend(userID, useridtounfriend);
        }
        
        public System.Threading.Tasks.Task<bool> UnFriendAsync(long userID, long useridtounfriend) {
            return base.Channel.UnFriendAsync(userID, useridtounfriend);
        }
        
        public bool DeleteUserPhoto(string xml) {
            return base.Channel.DeleteUserPhoto(xml);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserPhotoAsync(string xml) {
            return base.Channel.DeleteUserPhotoAsync(xml);
        }
        
        public bool UpdatePhotoDescription(long userPhotoId, string desc) {
            return base.Channel.UpdatePhotoDescription(userPhotoId, desc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePhotoDescriptionAsync(long userPhotoId, string desc) {
            return base.Channel.UpdatePhotoDescriptionAsync(userPhotoId, desc);
        }
        
        public string SearchPeople(int countryid, int cityid, string type, string name, long searcheeid) {
            return base.Channel.SearchPeople(countryid, cityid, type, name, searcheeid);
        }
        
        public System.Threading.Tasks.Task<string> SearchPeopleAsync(int countryid, int cityid, string type, string name, long searcheeid) {
            return base.Channel.SearchPeopleAsync(countryid, cityid, type, name, searcheeid);
        }
        
        public bool LikeUnLike(long userID, long userIDToLike, long userstatusid, bool iscurrentLike) {
            return base.Channel.LikeUnLike(userID, userIDToLike, userstatusid, iscurrentLike);
        }
        
        public System.Threading.Tasks.Task<bool> LikeUnLikeAsync(long userID, long userIDToLike, long userstatusid, bool iscurrentLike) {
            return base.Channel.LikeUnLikeAsync(userID, userIDToLike, userstatusid, iscurrentLike);
        }
        
        public bool LikeUnLikePhoto(long userID, long userPhotoID, bool iscurrentLike) {
            return base.Channel.LikeUnLikePhoto(userID, userPhotoID, iscurrentLike);
        }
        
        public System.Threading.Tasks.Task<bool> LikeUnLikePhotoAsync(long userID, long userPhotoID, bool iscurrentLike) {
            return base.Channel.LikeUnLikePhotoAsync(userID, userPhotoID, iscurrentLike);
        }
        
        public string GetMessageTrailBySenderID(long senderid, long recepientid, int pagenumber, int rowsperpage) {
            return base.Channel.GetMessageTrailBySenderID(senderid, recepientid, pagenumber, rowsperpage);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageTrailBySenderIDAsync(long senderid, long recepientid, int pagenumber, int rowsperpage) {
            return base.Channel.GetMessageTrailBySenderIDAsync(senderid, recepientid, pagenumber, rowsperpage);
        }
        
        public long[] SaveMessage(string json) {
            return base.Channel.SaveMessage(json);
        }
        
        public System.Threading.Tasks.Task<long[]> SaveMessageAsync(string json) {
            return base.Channel.SaveMessageAsync(json);
        }
        
        public int GetUnreadMessage(long userid) {
            return base.Channel.GetUnreadMessage(userid);
        }
        
        public System.Threading.Tasks.Task<int> GetUnreadMessageAsync(long userid) {
            return base.Channel.GetUnreadMessageAsync(userid);
        }
        
        public bool MarkMessageAsRead(long senderid, long recipientid) {
            return base.Channel.MarkMessageAsRead(senderid, recipientid);
        }
        
        public System.Threading.Tasks.Task<bool> MarkMessageAsReadAsync(long senderid, long recipientid) {
            return base.Channel.MarkMessageAsReadAsync(senderid, recipientid);
        }
        
        public bool IsILike(long userid, long searcheeid) {
            return base.Channel.IsILike(userid, searcheeid);
        }
        
        public System.Threading.Tasks.Task<bool> IsILikeAsync(long userid, long searcheeid) {
            return base.Channel.IsILikeAsync(userid, searcheeid);
        }
        
        public Language.Discovery.Entity.UserInterestContract[] GetUserInterest(long userid, string languagecode) {
            return base.Channel.GetUserInterest(userid, languagecode);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserInterestContract[]> GetUserInterestAsync(long userid, string languagecode) {
            return base.Channel.GetUserInterestAsync(userid, languagecode);
        }
        
        public bool UpdateUserInterest(Language.Discovery.Entity.UserInterestContract[] interestlist) {
            return base.Channel.UpdateUserInterest(interestlist);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserInterestAsync(Language.Discovery.Entity.UserInterestContract[] interestlist) {
            return base.Channel.UpdateUserInterestAsync(interestlist);
        }
        
        public int AddUser(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.AddUser(tObject);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.AddUserAsync(tObject);
        }
        
        public bool UpdateUser(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateUser(tObject);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateUserAsync(tObject);
        }
        
        public bool DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public Language.Discovery.Entity.UserContract GetByID(long id) {
            return base.Channel.GetByID(id);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract> GetByIDAsync(long id) {
            return base.Channel.GetByIDAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Language.Discovery.Admin.UserService.SearchUserAdminResponse Language.Discovery.Admin.UserService.IUser.SearchUserAdmin(Language.Discovery.Admin.UserService.SearchUserAdminRequest request) {
            return base.Channel.SearchUserAdmin(request);
        }
        
        public string SearchUserAdmin(Language.Discovery.Entity.SearchUserDTO tObject, out int virtualcount) {
            Language.Discovery.Admin.UserService.SearchUserAdminRequest inValue = new Language.Discovery.Admin.UserService.SearchUserAdminRequest();
            inValue.tObject = tObject;
            Language.Discovery.Admin.UserService.SearchUserAdminResponse retVal = ((Language.Discovery.Admin.UserService.IUser)(this)).SearchUserAdmin(inValue);
            virtualcount = retVal.virtualcount;
            return retVal.SearchUserAdminResult;
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Admin.UserService.SearchUserAdminResponse> SearchUserAdminAsync(Language.Discovery.Admin.UserService.SearchUserAdminRequest request) {
            return base.Channel.SearchUserAdminAsync(request);
        }
        
        public bool SignOut(long userid) {
            return base.Channel.SignOut(userid);
        }
        
        public System.Threading.Tasks.Task<bool> SignOutAsync(long userid) {
            return base.Channel.SignOutAsync(userid);
        }
        
        public bool UpdateUserAboutMe(Language.Discovery.Entity.UserAboutMeContract[] aboutmelist) {
            return base.Channel.UpdateUserAboutMe(aboutmelist);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAboutMeAsync(Language.Discovery.Entity.UserAboutMeContract[] aboutmelist) {
            return base.Channel.UpdateUserAboutMeAsync(aboutmelist);
        }
        
        public Language.Discovery.Entity.UserAboutMeContract[] GetUserAboutMe(long userid, string languagecode) {
            return base.Channel.GetUserAboutMe(userid, languagecode);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserAboutMeContract[]> GetUserAboutMeAsync(long userid, string languagecode) {
            return base.Channel.GetUserAboutMeAsync(userid, languagecode);
        }
        
        public bool UpdateOtherUserInfo(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateOtherUserInfo(tObject);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOtherUserInfoAsync(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateOtherUserInfoAsync(tObject);
        }
        
        public bool InsertBulkUser(int schoolid, Language.Discovery.Entity.UserContract[] tObject) {
            return base.Channel.InsertBulkUser(schoolid, tObject);
        }
        
        public System.Threading.Tasks.Task<bool> InsertBulkUserAsync(int schoolid, Language.Discovery.Entity.UserContract[] tObject) {
            return base.Channel.InsertBulkUserAsync(schoolid, tObject);
        }
        
        public bool UpdateUserActivity(long userID) {
            return base.Channel.UpdateUserActivity(userID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserActivityAsync(long userID) {
            return base.Channel.UpdateUserActivityAsync(userID);
        }
        
        public string GetDuplicateUsers(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.GetDuplicateUsers(userlist);
        }
        
        public System.Threading.Tasks.Task<string> GetDuplicateUsersAsync(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.GetDuplicateUsersAsync(userlist);
        }
        
        public string GetMessageDetailByUserMailID(long userMailID) {
            return base.Channel.GetMessageDetailByUserMailID(userMailID);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageDetailByUserMailIDAsync(long userMailID) {
            return base.Channel.GetMessageDetailByUserMailIDAsync(userMailID);
        }
        
        public bool AddVIPUser(Language.Discovery.Entity.VIPContract[] viplist) {
            return base.Channel.AddVIPUser(viplist);
        }
        
        public System.Threading.Tasks.Task<bool> AddVIPUserAsync(Language.Discovery.Entity.VIPContract[] viplist) {
            return base.Channel.AddVIPUserAsync(viplist);
        }
        
        public bool RemoveVIPUser(Language.Discovery.Entity.VIPContract[] viplist) {
            return base.Channel.RemoveVIPUser(viplist);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveVIPUserAsync(Language.Discovery.Entity.VIPContract[] viplist) {
            return base.Channel.RemoveVIPUserAsync(viplist);
        }
        
        public bool LikeUnLikeMessage(long usermailid) {
            return base.Channel.LikeUnLikeMessage(usermailid);
        }
        
        public System.Threading.Tasks.Task<bool> LikeUnLikeMessageAsync(long usermailid) {
            return base.Channel.LikeUnLikeMessageAsync(usermailid);
        }
        
        public Language.Discovery.Entity.UserMessageLikeRankingContract[] GetUserMessageLikeRanking(long userid) {
            return base.Channel.GetUserMessageLikeRanking(userid);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserMessageLikeRankingContract[]> GetUserMessageLikeRankingAsync(long userid) {
            return base.Channel.GetUserMessageLikeRankingAsync(userid);
        }
        
        public bool UpdateUserTheme(long userid, string theme) {
            return base.Channel.UpdateUserTheme(userid, theme);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserThemeAsync(long userid, string theme) {
            return base.Channel.UpdateUserThemeAsync(userid, theme);
        }
        
        public bool UpdateUserDontShowVideo(long userid, bool dontshowvideo) {
            return base.Channel.UpdateUserDontShowVideo(userid, dontshowvideo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserDontShowVideoAsync(long userid, bool dontshowvideo) {
            return base.Channel.UpdateUserDontShowVideoAsync(userid, dontshowvideo);
        }
        
        public bool UpdateUserDontShowNewTab(long userid, bool dontshownewtab) {
            return base.Channel.UpdateUserDontShowNewTab(userid, dontshownewtab);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserDontShowNewTabAsync(long userid, bool dontshownewtab) {
            return base.Channel.UpdateUserDontShowNewTabAsync(userid, dontshownewtab);
        }
        
        public bool UpdateUserSkin(long userid, string skin) {
            return base.Channel.UpdateUserSkin(userid, skin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserSkinAsync(long userid, string skin) {
            return base.Channel.UpdateUserSkinAsync(userid, skin);
        }
        
        public bool IsAfterSchoolTime(long userid) {
            return base.Channel.IsAfterSchoolTime(userid);
        }
        
        public System.Threading.Tasks.Task<bool> IsAfterSchoolTimeAsync(long userid) {
            return base.Channel.IsAfterSchoolTimeAsync(userid);
        }
        
        public bool UpdateUserAfterSchoolStatus(long userid, bool isaftershool, string parentsname, string parentsgivenname, string email) {
            return base.Channel.UpdateUserAfterSchoolStatus(userid, isaftershool, parentsname, parentsgivenname, email);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAfterSchoolStatusAsync(long userid, bool isaftershool, string parentsname, string parentsgivenname, string email) {
            return base.Channel.UpdateUserAfterSchoolStatusAsync(userid, isaftershool, parentsname, parentsgivenname, email);
        }
        
        public Language.Discovery.Entity.UserContract[] GetUserListBySchool(int schoolID) {
            return base.Channel.GetUserListBySchool(schoolID);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserListBySchoolAsync(int schoolID) {
            return base.Channel.GetUserListBySchoolAsync(schoolID);
        }
        
        public string GetDSUserListBySchool(int schoolID) {
            return base.Channel.GetDSUserListBySchool(schoolID);
        }
        
        public System.Threading.Tasks.Task<string> GetDSUserListBySchoolAsync(int schoolID) {
            return base.Channel.GetDSUserListBySchoolAsync(schoolID);
        }
        
        public bool InsertUpdateBulkUser(int schoolid, Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.InsertUpdateBulkUser(schoolid, userlist);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUpdateBulkUserAsync(int schoolid, Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.InsertUpdateBulkUserAsync(schoolid, userlist);
        }
        
        public bool DeleteUserMail(string xml) {
            return base.Channel.DeleteUserMail(xml);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserMailAsync(string xml) {
            return base.Channel.DeleteUserMailAsync(xml);
        }
        
        public long RegisterUser(Language.Discovery.Entity.UserContract uc) {
            return base.Channel.RegisterUser(uc);
        }
        
        public System.Threading.Tasks.Task<long> RegisterUserAsync(Language.Discovery.Entity.UserContract uc) {
            return base.Channel.RegisterUserAsync(uc);
        }
        
        public Language.Discovery.Entity.UserContract[] GetUserListBySchoolForTrackingOrProgress(int schoolID) {
            return base.Channel.GetUserListBySchoolForTrackingOrProgress(schoolID);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserListBySchoolForTrackingOrProgressAsync(int schoolID) {
            return base.Channel.GetUserListBySchoolForTrackingOrProgressAsync(schoolID);
        }
        
        public bool UpdateUserTrackProgress(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.UpdateUserTrackProgress(userlist);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserTrackProgressAsync(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.UpdateUserTrackProgressAsync(userlist);
        }
        
        public bool UpdateUserOptions(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateUserOptions(tObject);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserOptionsAsync(Language.Discovery.Entity.UserContract tObject) {
            return base.Channel.UpdateUserOptionsAsync(tObject);
        }
        
        public bool InsertFreeMessage(Language.Discovery.Entity.FreeMessageContract[] messageList) {
            return base.Channel.InsertFreeMessage(messageList);
        }
        
        public System.Threading.Tasks.Task<bool> InsertFreeMessageAsync(Language.Discovery.Entity.FreeMessageContract[] messageList) {
            return base.Channel.InsertFreeMessageAsync(messageList);
        }
        
        public Language.Discovery.Entity.UserContract[] GetUserByIDs(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.GetUserByIDs(userlist);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract[]> GetUserByIDsAsync(Language.Discovery.Entity.UserContract[] userlist) {
            return base.Channel.GetUserByIDsAsync(userlist);
        }
        
        public bool SendAutoMail(long userID) {
            return base.Channel.SendAutoMail(userID);
        }
        
        public System.Threading.Tasks.Task<bool> SendAutoMailAsync(long userID) {
            return base.Channel.SendAutoMailAsync(userID);
        }
        
        public bool MarkMessageAsUnRead(long senderid, long recipientid, long[] mailList) {
            return base.Channel.MarkMessageAsUnRead(senderid, recipientid, mailList);
        }
        
        public System.Threading.Tasks.Task<bool> MarkMessageAsUnReadAsync(long senderid, long recipientid, long[] mailList) {
            return base.Channel.MarkMessageAsUnReadAsync(senderid, recipientid, mailList);
        }
        
        public int GetMessageCountThatNeedsReply(long userid) {
            return base.Channel.GetMessageCountThatNeedsReply(userid);
        }
        
        public System.Threading.Tasks.Task<int> GetMessageCountThatNeedsReplyAsync(long userid) {
            return base.Channel.GetMessageCountThatNeedsReplyAsync(userid);
        }
        
        public string GetMailMessages(string type, long senderid, long recepientid, int pagenumber, int rowsperpage) {
            return base.Channel.GetMailMessages(type, senderid, recepientid, pagenumber, rowsperpage);
        }
        
        public System.Threading.Tasks.Task<string> GetMailMessagesAsync(string type, long senderid, long recepientid, int pagenumber, int rowsperpage) {
            return base.Channel.GetMailMessagesAsync(type, senderid, recepientid, pagenumber, rowsperpage);
        }
        
        public Language.Discovery.Entity.UserContract GetLatestMessage(long userid) {
            return base.Channel.GetLatestMessage(userid);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.UserContract> GetLatestMessageAsync(long userid) {
            return base.Channel.GetLatestMessageAsync(userid);
        }
    }
}
