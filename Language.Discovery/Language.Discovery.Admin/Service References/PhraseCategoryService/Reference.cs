//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Language.Discovery.Admin.PhraseCategoryService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhraseCategoryService.IPhraseCategoryService")]
    public interface IPhraseCategoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/BulkInsertPhraseCategory", ReplyAction="http://tempuri.org/IPhraseCategoryService/BulkInsertPhraseCategoryResponse")]
        bool BulkInsertPhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract[] tHeader, Language.Discovery.Entity.PhraseCategoryContract[] tDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/BulkInsertPhraseCategory", ReplyAction="http://tempuri.org/IPhraseCategoryService/BulkInsertPhraseCategoryResponse")]
        System.Threading.Tasks.Task<bool> BulkInsertPhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract[] tHeader, Language.Discovery.Entity.PhraseCategoryContract[] tDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/GetPhraseCategory", ReplyAction="http://tempuri.org/IPhraseCategoryService/GetPhraseCategoryResponse")]
        string GetPhraseCategory(string languageCode, int levelid, System.Nullable<int> schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/GetPhraseCategory", ReplyAction="http://tempuri.org/IPhraseCategoryService/GetPhraseCategoryResponse")]
        System.Threading.Tasks.Task<string> GetPhraseCategoryAsync(string languageCode, int levelid, System.Nullable<int> schoolid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/GetTopCategoryList", ReplyAction="http://tempuri.org/IPhraseCategoryService/GetTopCategoryListResponse")]
        Language.Discovery.Entity.TopCategoryContract[] GetTopCategoryList(string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhraseCategoryService/GetTopCategoryList", ReplyAction="http://tempuri.org/IPhraseCategoryService/GetTopCategoryListResponse")]
        System.Threading.Tasks.Task<Language.Discovery.Entity.TopCategoryContract[]> GetTopCategoryListAsync(string languageCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhraseCategoryServiceChannel : Language.Discovery.Admin.PhraseCategoryService.IPhraseCategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhraseCategoryServiceClient : System.ServiceModel.ClientBase<Language.Discovery.Admin.PhraseCategoryService.IPhraseCategoryService>, Language.Discovery.Admin.PhraseCategoryService.IPhraseCategoryService {
        
        public PhraseCategoryServiceClient() {
        }
        
        public PhraseCategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhraseCategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhraseCategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhraseCategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool BulkInsertPhraseCategory(Language.Discovery.Entity.PhraseCategoryHeaderContract[] tHeader, Language.Discovery.Entity.PhraseCategoryContract[] tDetail) {
            return base.Channel.BulkInsertPhraseCategory(tHeader, tDetail);
        }
        
        public System.Threading.Tasks.Task<bool> BulkInsertPhraseCategoryAsync(Language.Discovery.Entity.PhraseCategoryHeaderContract[] tHeader, Language.Discovery.Entity.PhraseCategoryContract[] tDetail) {
            return base.Channel.BulkInsertPhraseCategoryAsync(tHeader, tDetail);
        }
        
        public string GetPhraseCategory(string languageCode, int levelid, System.Nullable<int> schoolid) {
            return base.Channel.GetPhraseCategory(languageCode, levelid, schoolid);
        }
        
        public System.Threading.Tasks.Task<string> GetPhraseCategoryAsync(string languageCode, int levelid, System.Nullable<int> schoolid) {
            return base.Channel.GetPhraseCategoryAsync(languageCode, levelid, schoolid);
        }
        
        public Language.Discovery.Entity.TopCategoryContract[] GetTopCategoryList(string languageCode) {
            return base.Channel.GetTopCategoryList(languageCode);
        }
        
        public System.Threading.Tasks.Task<Language.Discovery.Entity.TopCategoryContract[]> GetTopCategoryListAsync(string languageCode) {
            return base.Channel.GetTopCategoryListAsync(languageCode);
        }
    }
}
